{
    "name": "Xilinx DSPLIB fir decimate asym",
    "description": "",
    "gui": false,
    "flow": "versal",
    "platform_allowlist": [
        "vck190"
    ],
    "platform_properties": {
        "vck190": {
            "v++": {
                "compiler": {
                    "clflags": []
                },
                "linker": {
                    "ldclflags": [
                        "--config PROJECT/system.cfg"
                    ]
                }
            }
        }
    },
    "pre_build": [
        {
            "build_cmd": "$(if $(filter-out REF,$(TAG)), tclsh LIB_DIR/L2/tests/aie/common/scripts/get_common_config_json.tcl ./config.json ./ $(UUT_KERNEL) $(PARAM_MAP))"
        },
        {
            "build_cmd": "$(if $(filter-out REF,$(TAG)), vitis -exec ipmetadata_config_checker LIB_DIR/L2/meta/fir_decimate_asym.json ./config.json -newflow)"
        },
        {
            "build_cmd": "$(if $(filter-out REF,$(TAG)), tclsh LIB_DIR/L2/tests/aie/common/scripts/gen_input.tcl $(LOC_INPUT_FILE) $(SSR_INPUT_WINDOW_VSIZE) $(NITER_UUT) $(DATA_SEED) $(DATA_STIM_TYPE) 0 0 $(DATA_TYPE) $(PORT_API) 1)"
        },
        {
            "build_cmd": "$(if $(filter-out REF,$(TAG)), perl LIB_DIR/L2/tests/aie/common/scripts/ssr_split_zip.pl --file $(LOC_INPUT_FILE) --type $(DATA_TYPE) --ssr $(UUT_SSR_IN) --split --dual $(DUAL_INPUT_SAMPLES) -k 0 -w $(SSR_INPUT_WINDOW_VSIZE) -c $(COEFF_TYPE) -fl $(FIR_LEN))"
        },
        {
            "build_cmd": "$(if $(filter-out REF,$(TAG)), cp $(LOC_INPUT_FILE)  $(REF_INPUT_FILE))"
        },
        {
            "build_cmd": "$(if $(filter-out REF,$(TAG)), perl LIB_DIR/L2/tests/aie/common/scripts/ssr_split_zip.pl --file $(REF_INPUT_FILE) --type $(DATA_TYPE) --ssr 1 --split --dual 0 -k 0 -w ${REF_INPUT_WINDOW_VSIZE} -c $(COEFF_TYPE) -fl $(FIR_LEN))"
        },
        {
            "build_cmd": "$(if $(filter-out REF,$(TAG)), make run TARGET=x86sim TAG=REF)"
        },
        {
            "build_cmd": "$(if $(filter-out REF,$(TAG)), make cleanall)"
        }
    ],
    "post_launch": [
        {
            "target": "aiesim",
            "launch_cmd": [
                "mkdir -p logs",
                "perl LIB_DIR/L2/tests/aie/common/scripts/ssr_split_zip.pl --file ./aiesimulator_output/data/uut_output.txt --type $(DATA_TYPE) --ssr $(UUT_SSR_OUT) --zip --dual $(DUAL_OUTPUT_SAMPLES) -k 0 -w $(SSR_OUTPUT_WINDOW_VSIZE)",
                "perl LIB_DIR/L2/tests/aie/common/scripts/ssr_split_zip.pl --file ./x86simulator_output/data/ref_output.txt --type $(DATA_TYPE) --ssr 1 --zip --dual 0 -k 0 -w $(REF_OUTPUT_WINDOW_VSIZE)",
                "grep -ve '[XT]' ./aiesimulator_output/data/uut_output.txt > ./logs/uut_output.txt",
                "grep -ve '[XT]' ./x86simulator_output/data/ref_output.txt > ./logs/ref_output.txt",
                "tclsh LIB_DIR/L2/tests/aie/common/scripts/diff.tcl ./logs/uut_output.txt ./logs/ref_output.txt ./logs/diff.txt $(DIFF_TOLERANCE) $(CC_TOLERANCE)",
                "tclsh LIB_DIR/L2/tests/aie/common/scripts/get_common_config.tcl $(STATUS_FILE) ./ UUT_KERNEL $(UUT_KERNEL) $(PARAM_MAP) UUT_SSR $(UUT_SSR)",
                "tclsh LIB_DIR/L2/tests/aie/common/scripts/get_stats.tcl $(SSR_INPUT_WINDOW_VSIZE) $(CASC_LEN) $(STATUS_FILE) ./aiesimulator_output filter $(NITER_UUT)",
                "tclsh LIB_DIR/L2/tests/aie/common/scripts/theoretical_minimum_scripts/get_fir_theoretical_min.tcl $(DATA_TYPE) $(COEFF_TYPE) $(FIR_LEN) $(SSR_INPUT_WINDOW_VSIZE) $(CASC_LEN) $(INTERPOLATE_FACTOR) $(DECIMATE_FACTOR) $(SYMMETRY_FACTOR) $(UUT_SSR) $(STATUS_FILE) $(UUT_KERNEL)",
                "LIB_DIR/L2/tests/aie/common/scripts/harvest_memory.sh $(STATUS_FILE) LIB_DIR/L2/tests/aie/common/scripts",
                "tclsh LIB_DIR/L2/tests/aie/common/scripts/diff_exit.tcl ./"
            ]
        },
        {
            "target": "x86sim",
            "launch_cmd": [
                "$(if $(filter-out REF,$(TAG)), mkdir -p logs)",
                "$(if $(filter-out REF,$(TAG)), perl LIB_DIR/L2/tests/aie/common/scripts/ssr_split_zip.pl --file ./x86simulator_output/data/uut_output.txt --type $(DATA_TYPE) --ssr $(UUT_SSR_OUT) --zip --dual $(DUAL_OUTPUT_SAMPLES) -k 0 -w $(SSR_OUTPUT_WINDOW_VSIZE))",
                "$(if $(filter-out REF,$(TAG)), perl LIB_DIR/L2/tests/aie/common/scripts/ssr_split_zip.pl --file ./x86simulator_output/data/ref_output.txt --type $(DATA_TYPE) --ssr 1 --zip --dual 0 -k 0 -w $(REF_OUTPUT_WINDOW_VSIZE))",
                "$(if $(filter-out REF,$(TAG)), grep -ve '[XT]' ./x86simulator_output/data/uut_output.txt > ./logs/uut_output.txt)",
                "$(if $(filter-out REF,$(TAG)), grep -ve '[XT]' ./x86simulator_output/data/ref_output.txt > ./logs/ref_output.txt)",
                "$(if $(filter-out REF,$(TAG)), tclsh LIB_DIR/L2/tests/aie/common/scripts/diff.tcl ./logs/uut_output.txt ./logs/ref_output.txt ./logs/diff.txt $(DIFF_TOLERANCE) $(CC_TOLERANCE))",
                "$(if $(filter-out REF,$(TAG)), tclsh LIB_DIR/L2/tests/aie/common/scripts/diff_exit.tcl ./)"
            ]
        }
    ],
    "launch": [
        {
            "name": "aiesim-launch",
            "target": "aiesim"
        },
        {
            "name": "x86sim-launch",
            "target": "x86sim",
            "sim_options": ""
        }
    ],
    "aiecompiler": {
        "compiler": {
            "includepaths": [
                "LIB_DIR/L1/include/aie",
                "LIB_DIR/L1/src/aie",
                "LIB_DIR/L1/tests/aie/inc",
                "LIB_DIR/L1/tests/aie/src",
                "LIB_DIR/L2/include/aie",
                "LIB_DIR/L2/tests/aie/common/inc",
                "./"
            ],
            "customized_params": {
                "params": "--dataflow -v  $($(TAG)_TARGET_COMPILE_ARGS) -workdir=$($(TAG)_WORK_DIR) -Xpreproc=\"$($(TAG)_PREPROC_ARGS)\"",
                "default": {
                    "TAG": "UUT",
                    "UUT_KERNEL": "fir_decimate_asym",
                    "REF_KERNEL": "fir_decimate_asym_ref",
                    "UUT_GRAPH": "fir_decimate_asym_graph",
                    "REF_GRAPH": "fir_decimate_asym_ref_graph",
                    "NITER": "16",
                    "NITER_UUT": "$(NITER)",
                    "NITER_REF": "$$(($(NITER_UUT) / 2))",
                    "INPUT_WINDOW_VSIZE": "384",
                    "UUT_INPUT_WINDOW_VSIZE": "$(INPUT_WINDOW_VSIZE)",
                    "SSR_INPUT_WINDOW_VSIZE": "$$(( $(INPUT_WINDOW_VSIZE)  ))",
                    "REF_INPUT_WINDOW_VSIZE": "$$(( $(SSR_INPUT_WINDOW_VSIZE) * $(NITER_UUT) / $(NITER_REF)))",
                    "DATA_TYPE": "cint16",
                    "COEFF_TYPE": "int16",
                    "COEFF_SIZE": "2",
                    "FIR_LEN": "9",
                    "SHIFT": "15",
                    "ROUND_MODE": "0",
                    "CASC_LEN": "1",
                    "DUAL_IP": "0",
                    "PORT_API": "0",
                    "USE_COEFF_RELOAD": "0",
                    "SYMMETRY_FACTOR": "1",
                    "INTERPOLATE_FACTOR": "1",
                    "DECIMATE_FACTOR": "3",
                    "NUM_OUTPUTS": "1",
                    "USE_CHAIN": "0",
                    "USE_CUSTOM_CONSTRAINT": "0",
                    "UUT_SSR": "1",
                    "UUT_PARA_INTERP_POLY": "1",
                    "UUT_PARA_DECI_POLY": "1",
                    "UUT_SSR_IN": "$$(( $(UUT_SSR) * $(UUT_PARA_DECI_POLY) ))",
                    "UUT_SSR_OUT": "$$(( $(UUT_SSR) * $(UUT_PARA_INTERP_POLY) ))",
                    "DUAL_INPUT_SAMPLES": "$$(( $(PORT_API) * $(DUAL_IP) ))",
                    "DUAL_OUTPUT_SAMPLES": "$$(( $(PORT_API) * ($(NUM_OUTPUTS)-1) ))",
                    "SSR_OUTPUT_WINDOW_VSIZE": "$$(( $(INPUT_WINDOW_VSIZE) * $(INTERPOLATE_FACTOR)  / $(DECIMATE_FACTOR)  ))",
                    "REF_OUTPUT_WINDOW_VSIZE": "$$(( $(SSR_OUTPUT_WINDOW_VSIZE) * $(NITER_UUT) / $(NITER_REF)))",
                    "DIFF_TOLERANCE": "0",
                    "CC_TOLERANCE": "0",
                    "DATA_SEED": "1",
                    "DATA_STIM_TYPE": "0",
                    "COEFF_STIM_TYPE": "0",
                    "UUT_SIM_FILE": "./data/uut_output.txt",
                    "REF_SIM_FILE": "./data/ref_output.txt",
                    "UUT_SIM_FILE2": "./data/uut_output_2.txt",
                    "REF_SIM_FILE2": "./data/ref_output_2.txt",
                    "LOC_COEFF_FILE": "./data/coeff.txt",
                    "LOC_INPUT_FILE": "./data/input.txt",
                    "REF_INPUT_FILE": "./data/input_ref.txt",
                    "UUT_FILE_SUFFIX": "$(UUT_KERNEL)_$(DATA_TYPE)_$(COEFF_TYPE)_$(FIR_LEN)_$(SHIFT)_$(ROUND_MODE)_$(CASC_LEN)_$(DUAL_IP)_$(USE_COEFF_RELOAD)_$(SYMMETRY_FACTOR)_$(INTERPOLATE_FACTOR)_$(DECIMATE_FACTOR)_$(NUM_OUTPUTS)_$(PORT_API)",
                    "LOG_FILE": "./logs/log_$(UUT_FILE_SUFFIX).txt",
                    "STATUS_LOG_FILE": "./logs/status_$(UUT_FILE_SUFFIX).txt",
                    "STATUS_FILE": "$(STATUS_LOG_FILE)",
                    "MAX_FIR_PER_KERNEL": "256",
                    "UUT_TARGET_COMPILE_ARGS": "--Xrouter=DMAFIFOsInFreeBankOnly --xlopt=1 -stacksize=$$(( $(MAX_FIR_PER_KERNEL) * $(INTERPOLATE_FACTOR) * $(COEFF_SIZE) + 1536)) -Xchess=llvm.xargs=\"-std=c++2a\" -Xchess=main:backend.mist2.xargs=\"+NOdra\"  -Xchess=main:backend.mist2.pnll=\"off\" ",
                    "REF_TARGET_COMPILE_ARGS": "",
                    "UUT_WORK_DIR": "./Work",
                    "REF_WORK_DIR": "./Work",
                    "PREPROC_ARGS": " -DCOEFF_FILE=$(LOC_COEFF_FILE) -DDATA_TYPE=$(DATA_TYPE) -DCOEFF_TYPE=$(COEFF_TYPE) -DFIR_LEN=$(FIR_LEN) -DSHIFT=$(SHIFT) -DROUND_MODE=$(ROUND_MODE) -DCASC_LEN=$(CASC_LEN) -DDUAL_IP=$(DUAL_IP) -DPORT_API=$(PORT_API) -DUSE_COEFF_RELOAD=$(USE_COEFF_RELOAD) -DSTIM_TYPE=$(COEFF_STIM_TYPE) -DINTERPOLATE_FACTOR=$(INTERPOLATE_FACTOR) -DDECIMATE_FACTOR=$(DECIMATE_FACTOR) -DNUM_OUTPUTS=$(NUM_OUTPUTS) -DUUT_SSR=$(UUT_SSR) -DUSE_CHAIN=$(USE_CHAIN) -DUSE_CUSTOM_CONSTRAINT=$(USE_CUSTOM_CONSTRAINT) ",
                    "REF_PREPROC_ARGS": "-DUUT_GRAPH=$(REF_GRAPH) -DINPUT_FILE=$(REF_INPUT_FILE) -DOUTPUT_FILE=$(REF_SIM_FILE) $(PREPROC_ARGS)  -DINPUT_WINDOW_VSIZE=$(REF_INPUT_WINDOW_VSIZE) -DNITER=$(NITER_REF)",
                    "UUT_PREPROC_ARGS": "-DUUT_GRAPH=$(UUT_GRAPH) -DINPUT_FILE=$(LOC_INPUT_FILE) -DOUTPUT_FILE=$(UUT_SIM_FILE) $(PREPROC_ARGS)  -DINPUT_WINDOW_VSIZE=$(UUT_INPUT_WINDOW_VSIZE) -DNITER=$(NITER_UUT) -DUSING_UUT=1",
                    "PARAM_MAP": "DATA_TYPE $(DATA_TYPE) COEFF_TYPE $(COEFF_TYPE) FIR_LEN $(FIR_LEN) SHIFT $(SHIFT) ROUND_MODE $(ROUND_MODE) INPUT_WINDOW_VSIZE $(INPUT_WINDOW_VSIZE) CASC_LEN $(CASC_LEN) DECIMATE_FACTOR $(DECIMATE_FACTOR) SYMMETRY_FACTOR $(SYMMETRY_FACTOR) DUAL_IP $(DUAL_IP) PORT_API $(PORT_API) USE_COEFF_RELOAD $(USE_COEFF_RELOAD) NUM_OUTPUTS $(NUM_OUTPUTS) UUT_SSR $(UUT_SSR)"
                }
            }
        }
    },
    "aiecontainers": [
        {
            "accelerators": [
                {
                    "location": "LIB_DIR/L2/tests/aie/fir_decimate_asym/test.cpp",
                    "files": [
                        "LIB_DIR/L1/src/aie/fir_decimate_asym.cpp"
                    ],
                    "pl-freq": 1000,
                    "workdir": "./Work",
                    "options": "",
                    "name": "libadf.a"
                }
            ]
        }
    ],
    "testinfo": {
        "disable": false,
        "jobs": [
            {
                "index": 0,
                "dependency": [],
                "env": "",
                "cmd": "",
                "max_memory_MB": 32768,
                "max_time_min": {
                    "vitis_aie_x86sim": 60,
                    "vitis_aie_sim": 200
                }
            }
        ],
        "customized_params": "multi_params.json",
        "targets": [
            "vitis_aie_sim",
            "vitis_aie_x86sim"
        ],
        "category": "canary"
    }
}